Every function takes an "event" and returns event[s*]

*the 1:1 nature of event->event is old-guard functional programming EX Haskell.  Haskell has to use monads to model errors and other multiple return type scenarios--is this tractable in a general purpose language?  I'd wager monads are over the "learnability threshold", and they add a lot of arcana to code.  "Callback" style multiple return values passes the burden to the caller ex JS/Go callbacks if (err) ... .

What about functions that return multiple types?  This is Java checked exceptions. Java pattern matches on return types via cascading try/catch blocks.  This is interesting, but its a disaster for code quality and exection.  

Defining umbrella types is fine within the bounds of a program, but to maintain the strictness of the program text within the service the umbrella type needs to extend into the client's text.

rest request that takes an id, either returns:

the entity
not found
permission denied
server error

public Response getThing(Requestor requestor, int id) throws ServerException {
  if (!requestor.hasPermission())
    return PermissionDenied();
  Entity thing = getThing(id);
  if (thing == null)
    return NotFound();
  return Ok(thing);
}

Entity getMyThing (id) throws DependencyException, AuthException {
  Response resp = server.getThing(ME, id);

  switch (resp.status) {
    case Codes.OK:
      return new Entity(resp.body);
    case Codes.NOT_FOUND:
      return null;
    case Codes.PERMISSION_DENIED:
      return throw new AuthException();
    default:
      throw new DependencyException(resp.status, resp.body);
  }
}
